using Mono.Cecil;
using Mono.Cecil.Cil;
using System.Collections.Generic;
using System.Linq;

namespace MiniCover.Extensions
{
    public static class TypeDefinitionExtensions
    {
        public static MethodDefinition FindOrCreateCctor(this TypeDefinition typeDefinition)
        {
            var cctor = typeDefinition.Methods.FirstOrDefault(x => x.Name == ".cctor");
            if (cctor == null)
            {
                var attributes = MethodAttributes.Static
                                 | MethodAttributes.SpecialName
                                 | MethodAttributes.RTSpecialName;
                cctor = new MethodDefinition(".cctor", attributes, typeDefinition.Module.TypeSystem.Void);
                typeDefinition.Methods.Add(cctor);
                cctor.Body.Instructions.Add(Instruction.Create(OpCodes.Ret));
            }
            return cctor;
        }

        public static IEnumerable<MethodDefinition> GetAllMethods(this TypeDefinition type)
        {
            if (type.FullName == "<Module>" || type.FullName == "AutoGeneratedProgram")
                yield break;

            foreach (var method in type.Methods.Where(m => m.HasBody && m.DebugInformation.HasSequencePoints))
                yield return method;

            foreach (var subType in type.NestedTypes)
            {
                foreach (var method in GetAllMethods(subType))
                    yield return method;
            }
        }
    }
}
